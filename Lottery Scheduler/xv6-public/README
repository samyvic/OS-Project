## Lottery Scheduling


In this project we modify the xv6 to support a new scheduler called lottery scheduler.
Lottery scheduling is a probabilistic scheduling algorithm for processes in an operating system.
Processes are each assigned some number of lottery tickets, and the scheduler draws a random ticket to select the next process.
The distribution of tickets need not be uniform; granting a process more tickets provides it a relative higher chance of selection.
Lottery scheduling solves the problem of starvation. 
Giving each process at least one lottery ticket guarantees that it has non-zero probability of being selected at each scheduling operation.


What to do:
make 2 system calls 
(settickets: which sets the number of tickets of the calling process)
return 0 if successfull and return -1 is the call passes a number less than 1, as the default each process has at least 1 ticket

(getpinfo: returns information about all running processes)
inuse: whether this slot of the process table is in use (1 or 0)
tickets: number of tickets set by settickets()
pid: the PID of each process
ticks: the number of times this proces has been scheduled since it was created
return 0 if successfull and return -1 if a bad or null pointer is passed into the kernel


conditions:
-----------
1. assigning tickets to a process when it is created
2. make sure that a child process inherts the same number of tickets as its parent
3. figure out how to generate random numbers in the kernel
4. understand how to fill the stucture (pstat) in the kernel and pass the results to the user space

steps:
------
1. syscall.h
2. syscall.c
3. pstat.h
4. rand.h
5. rand.c
6. proc.h
7. proc.c
8. sysproc.c
9. defs.h
10. usys.S
11. user.h
12. makefile
13. test


test 10 &; test 20 &; test 30 &; infotest
